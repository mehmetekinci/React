{"version":3,"sources":["components/city-weather.js","App.js","serviceWorker.js","index.js"],"names":["CityWeather","props","className","name","countryCode","weathers","map","weather","main","description","temp_min","temp_max","coordLon","coordLat","convertKelvinToCelsius","kelvin","App","citiesInfo","cityInfo","index","sys","country","toFixed","coord","lon","lat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y/EA8BeA,MA5Bf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,qBACb,wBAAIA,UAAU,iBACXD,EAAME,KADT,KACiBF,EAAMG,aAEvB,wBAAIF,UAAU,gBACXD,EAAMI,SAASC,KAAI,SAAAC,GAClB,OACE,6BACE,4BACE,2BAAIA,EAAQC,OAEd,4BAAKD,EAAQE,kBAKrB,wBAAIP,UAAU,4BACZ,0CAAgBD,EAAMS,UACtB,0CAAgBT,EAAMU,UACtB,0CACcV,EAAMW,SADpB,KACgCX,EAAMY,a,OCnBxCC,EAAyB,SAAAC,GAAM,OACnCA,EAAS,EAAIA,EAASA,EAAS,QAgClBC,MA9Bf,WACE,OACE,yBAAKd,UAAU,OACb,uCAEA,yBAAKA,UAAU,mBACZe,EAAWX,KAAI,SAACY,EAAUC,GACzB,OACE,6BACE,kBAAC,EAAD,CACEhB,KAAMe,EAASf,KACfC,YAAac,EAASE,IAAIC,QAC1BhB,SAAUa,EAASX,QACnBG,SAAUI,EACRI,EAASV,KAAKE,UACdY,QAAQ,GACVX,SAAUG,EACRI,EAASV,KAAKG,UACdW,QAAQ,GACVV,SAAUM,EAASK,MAAMC,IACzBX,SAAUK,EAASK,MAAME,aChBrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f7d70b6b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction CityWeather(props) {\n  return (\n    <div className=\"weather-container\">\n      <h2 className=\"weather-title\">\n        {props.name}, {props.countryCode}\n      </h2>\n      <ul className=\"weather-list\">\n        {props.weathers.map(weather => {\n          return (\n            <div>\n              <li>\n                <b>{weather.main}</b>\n              </li>\n              <li>{weather.description}</li>\n            </div>\n          );\n        })}\n      </ul>\n      <ul className=\"weather-temps-and-coords\">\n        <li>min temp : {props.temp_min}</li>\n        <li>max temp : {props.temp_max}</li>\n        <li>\n          location : {props.coordLon}, {props.coordLat}\n        </li>\n      </ul>\n    </div>\n  );\n}\nexport default CityWeather;\n","import React from 'react';\nimport './App.css';\nimport CityWeather from './components/city-weather';\nimport citiesInfo from './city-weather.json';\n\nconst convertKelvinToCelsius = kelvin =>\n  kelvin < 0 ? kelvin : kelvin - 273.15;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Weather</h2>\n\n      <div className=\"wheather-tables\">\n        {citiesInfo.map((cityInfo, index) => {\n          return (\n            <div>\n              <CityWeather\n                name={cityInfo.name}\n                countryCode={cityInfo.sys.country}\n                weathers={cityInfo.weather}\n                temp_min={convertKelvinToCelsius(\n                  cityInfo.main.temp_min,\n                ).toFixed(1)}\n                temp_max={convertKelvinToCelsius(\n                  cityInfo.main.temp_max,\n                ).toFixed(1)}\n                coordLon={cityInfo.coord.lon}\n                coordLat={cityInfo.coord.lat}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}